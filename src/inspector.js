// Generated by CoffeeScript 1.3.3
(function() {

  define(['./goodies'], function(_) {
    var changePreview, changeTests, color_subjects, data, options, removeColor, toggleMessage;
    color_subjects = null;
    options = null;
    data = null;
    toggleMessage = function(showTests) {
      var color_tests, welcome_message;
      welcome_message = _.id('welcome-message');
      color_tests = _.id('tests');
      if (showTests) {
        _.attr(_.id('app'), 'class', 'active-panels');
        return _.show(color_tests);
      } else {
        _.attr(_.id('app'), 'class', 'not-active-panels');
        return _.hide(color_tests);
      }
    };
    changePreview = function(template) {
      return color_subjects.innerHTML += template(data);
    };
    changeTests = function(template) {
      return _.id('tests').innerHTML = template(data);
    };
    removeColor = function(event) {
      var closeButton, preview, previewsLength;
      closeButton = event.target;
      if (!closeButton.classList.contains('close')) {
        return;
      }
      previewsLength = _.cls('color-preview').length - 1;
      _.attr(_.id('subjects'), 'data-subjects', previewsLength, true);
      _.remove(closeButton.parentNode);
      toggleMessage(previewsLength !== 0);
      preview = _.cls('color-preview')[0];
      if (!preview) {
        return;
      }
      data = {
        hex: _.attr(preview, 'data-hex')
      };
      return _.template(options.singleTemplate, changeTests);
    };
    return {
      selectColor: function(event) {
        var attribute, clickedColor, colorTemplate, color_previews, length, previewsLength;
        clickedColor = event.target;
        if (!clickedColor.classList.contains('color')) {
          return;
        }
        attribute = clickedColor.getAttribute.bind(clickedColor);
        color_previews = _.cls('color-preview');
        data = {
          name: attribute('data-name'),
          hex: attribute('data-hex'),
          rgb: attribute('data-rgb'),
          hsl: attribute('data-hsl'),
          checkContrast: function (color1, color2) {
            var contrast = Color(color1).contrast(Color(color2)),
                roundedContrast = Math.round( contrast * 10 ) / 10;
            if (contrast >= 5) {
              return '<abbr title="The contrast between these two colors is '+roundedContrast+'/21. Good enough." class="good contrast">Good contrast</abbr>';
            } else {
              return '<abbr title="The contrast between these two colors is '+roundedContrast+'/21. Might be problematic." class="bad contrast">Bad contrast</abbr>';
            }
          }
        };
        if (color_previews.length > 0 && event.altKey) {
          if (color_previews.length === 2) {
            _.remove(color_previews[+(!event.shiftKey)]);
          }
          data.firstHex = _.attr(color_previews[0], 'data-hex');
          colorTemplate = options.doubleTemplate;
          previewsLength = 2;
        } else {
          length = color_previews.length;
          while (length-- > 0) {
            _.remove(color_previews[0]);
          }
          colorTemplate = options.singleTemplate;
          previewsLength = 1;
        }
        _.attr(color_subjects, 'data-subjects', previewsLength);
        toggleMessage(true);
        _.template(options.previewTemplate, changePreview);
        return _.template(colorTemplate, changeTests);
      },
      setup: function($options) {
        console.log('function loaded')
        options = $options;
        color_subjects = _.id('subjects');
        _.listen(_.id('colors'), 'click', this.selectColor);
        _.listen(_.id('palette_colors'), 'click', this.selectColor);
        _.listen(_.id('subjects'), 'click', removeColor);
        return _.listen('keydown', function(event) {
          if (event.altKey) {
            return event.preventDefault();
          }
        });
      }
    };
  });

}).call(this);
